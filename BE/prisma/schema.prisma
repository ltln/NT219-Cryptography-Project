generator client {
  provider      = "prisma-client-js"
  output        = "client"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CoverType {
  HARD
  SOFT
}

enum OrderStatus {
  PENDING
  PROCESSING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  COD
  CARD
}

model User {
  userId         String    @id @default(uuid())
  username       String    @unique
  fullname       String
  address        String?
  phone          String?   @unique
  email          String    @unique
  password       String
  createdAt      DateTime  @default(now())
  verified       Boolean   @default(false)
  mfaStatus      Boolean   @default(false)
  mfaTotpSecret  String? // Should be encrypted in production
  orders         Order[]   @relation("user")
  sellerOrders   Order[]   @relation("seller")
  sellerProducts Product[]
}

model Product {
  productId   String     @id @default(uuid())
  sellerId    String
  name        String
  description String?
  coverImage  String?
  coverType   CoverType?
  dimensionsX Float?
  dimensionsY Float?
  dimensionsZ Float?
  weight      Float?
  price       Float
  discount    Float?     @default(0)
  images      String[]
  language    String?
  pageCount   Int?
  publisher   String?
  author      String?
  publishYear Int?
  stock       Int        @default(0)
  category    String?
  createdAt   DateTime   @default(now())

  orderDetails OrderDetail[]
  seller       User          @relation(fields: [sellerId], references: [userId])
}

model Order {
  orderId          String            @id @default(uuid())
  userId           String
  sellerId         String
  orderDate        DateTime          @default(now())
  fullName         String
  phone            String
  email            String?
  address          String
  status           OrderStatus       @default(PENDING)
  total            Float
  user             User              @relation(name: "user", fields: [userId], references: [userId])
  seller           User              @relation(name: "seller", fields: [sellerId], references: [userId])
  orderDetails     OrderDetail[]
  payment          Payment?
  invoiceSignature InvoiceSignature?
  OrderSignature   OrderSignature[]
}

model OrderDetail {
  orderId   String
  productId String
  quantity  Int
  price     Float
  subtotal  Float
  order     Order   @relation(fields: [orderId], references: [orderId])
  product   Product @relation(fields: [productId], references: [productId])

  @@id([orderId, productId])
}

model OrderSignature {
  orderId   String
  signature String
  signedAt  DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [orderId])

  @@id(orderId)
}

model Payment {
  paymentId String        @id @default(uuid())
  orderId   String        @unique
  date      DateTime      @default(now())
  amount    Float
  method    PaymentMethod
  status    String        @default("Pending")
  order     Order         @relation(fields: [orderId], references: [orderId])
}

model InvoiceSignature {
  orderId   String
  signature String
  order     Order  @relation(fields: [orderId], references: [orderId])

  createdAt DateTime @default(now())

  @@id(orderId)
}
